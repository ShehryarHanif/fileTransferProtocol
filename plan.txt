PLAN:

1. Implement User Authentication System using users.txt
--- Probably just create structs to store users and then store all users in array
--- Or whenver user logins, scan through file
--- Both works ig

2. Decide on structure of file
--- A lot of complex functions at work here
--- Need to neatly compartmentalize them

* = to do next
** = done


Modules/Parts Needed for Server:
a) Connection Creation/Handling (the core component)
---- Convert fork to connect *
b) Reading and disecting user input  *
c) User Authentication module**
d) Command Handler and Commands Modules
f) Data transfer part/module

Modules/Parts Needed for Server:
a) Connection Creation/Handling (the core component)
---- Receiving FTP files
b) Reading and disecting user input *
c) Commands Modules (for ! commands) and Command Handler

3. Each data file transfer is done on a different port -> Select/Fork every time

Extra TODOs:
- Free all malloc memory
- Check all strtok


Questions:
- How are ports decided (N, N+1, N+2 etc.) for FTP?
- Can't we let the system decide the port (not use bind)?
- What is port 21 vs. port 20?
- Is file transfer blocking for both server and client?
- Can 1 client initiate multiple file transfers simultaenously?
- How server will be concurrent if multiple clients are connected to 20?
- How to decide client ports from N to N+i since they will likely overlap?